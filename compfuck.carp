(defndynamic search-matching-bracket [s m]
  (if (Dynamic.or (= (String.length s) 0) (= m 0))
    0
    (let [f (String.char-at s 0)]
      (inc (search-matching-bracket (String.tail s) (if (= \] f) (dec m) (if (= \[ f) (inc m) m)))))))

(defndynamic compile-compf-char [c s i]
  (if (= \+ f)
    (list 1 '(Array.aupdate! &t h &(fn [x] (mod (Int.inc @x) 255))))
    (if (= \- f)
      (list 1 '(Array.aupdate! &t h &(fn [x] (max 0 (Int.dec @x)))))
      (if (= \> f)
        (list 1 '(set! h (+ h 1)))
        (if (= \< f)
          (list 1 '(set! h (- h 1)))
          (if (= \. f)
            (list 1 '(IO.print &(str (Char.from-int @(Array.nth &t h)))))
            (if (= \, f)
              (list 1 '(Array.aset! &t h (Char.to-int (IO.get-char))))
              (if (= \[ f)
                (let [end (search-matching-bracket (String.suffix-string s (+ i 1)) 1)]
                  (list (+ end 1)
                    (list 'while '(/= &0 (Array.nth &t h))
                      (cons 'do
                        (let [subs (String.substring s (+ i 1) end)]
                          (compile-compf subs 0))))))
                '(1 ())))))))))

(defndynamic compile-compf [p i]
  (if (= i (String.length p))
    '()
    (let [f (String.char-at p i)]
      (if (= \] f)
        '()
        (let [incr-c (compile-compf-char f p i)]
          (let [incr (car incr-c)
                compiled (cadr incr-c)]
            (cons compiled
                  (compile-compf p
                                 (+ i incr)))))))))

(defmacro compf [prog]
  (list 'defn 'main []
    (cons 'let-do
      (cons (array 't '(Array.replicate 30000 &0)
                   'h 0)
        (compile-compf prog 0)))))
